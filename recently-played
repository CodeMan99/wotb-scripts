#!/usr/bin/env node

var async = require('async')
  , fs = require('fs')
  , http = require('http')
  , path = require('path')
  , program = require('commander')
  , Stream = require('stream').Transform
  , url = require('url')
  , wotb = require('../wotblitz')

program
  .option('-c, --count <number>', 'number of recent vehicles to return [default: 5]', Number, 5)
  .option('-s, --save-images <directory>', 'save images to the given directory', directoryType)
  .parse(process.argv)

async.auto({
  sess: wotb.session.load,
  login: ['sess', (callback, d) => d.sess.isLoggedIn() ? callback(null) : wotb.auth.login(8000, d.sess, callback)],
  stats: ['login', (callback, d) =>
    wotb.tankStats.stats(null, [], 1, ['last_battle_time', 'tank_id'], d.sess, callback)
  ],
  recent: ['stats', (callback, d) =>
    callback(null, d.stats[d.sess.account_id]
      .sort((a, b) => b.last_battle_time - a.last_battle_time)
      .slice(0, program.count)
    )
  ],
  vehicles: ['recent', (callback, d) =>
    wotb.tankopedia.vehicles(d.recent.map(r => r.tank_id), [], ['images.preview', 'name'], callback)
  ],
  images: ['vehicles', (callback, d) => {
    if (!program.saveImages) return callback(null)
    async.map(d.vehicles, image.bind(null, program.saveImages), callback)
  }]
}, (err, d) => {
  if (err) throw err

  var vehicles = d.recent.map(r => ({
    image: d.vehicles[r.tank_id].images.preview,
    last_battle_time: new Date(r.last_battle_time * 1000),
    name: d.vehicles[r.tank_id].name,
    tank_id: r.tank_id
  }))

  if (process.stdout.isTTY)
    console.dir(vehicles, {colors: true})
  else
    console.log(JSON.stringify(vehicles, null, 2))
})

function image(directory, vehicle, callback) {
  var imgUrl = vehicle.images.preview
    , filepath = path.join(directory,
      url.parse(imgUrl)
        .pathname
        .split('/')
        .slice(-1)[0]
    )

  http.get(imgUrl, response => {
    var data = new Stream()

    response.on('data', chunk => data.push(chunk))
    response.on('end', () => {
      data.pipe(fs.createWriteStream(filepath))
      callback(null)
    })
  }).once('error', callback)
}

function directoryType(val) {
  var dir = path.resolve(val)

  if (fs.statSync(dir).isDirectory()) return dir

  throw new Error('value must be a directory')
}
